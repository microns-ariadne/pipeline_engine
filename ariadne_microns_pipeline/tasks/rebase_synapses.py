'''RebaseSynapsesTask - rebase a synapse-connections.json file's neuron IDs

'''

import json
import luigi
import operator
import rh_logger

from .utilities import RunMixin, RequiresMixin


class RebaseSynapsesTask(
    RunMixin,
    RequiresMixin,
    luigi.Task):
    '''Rebase a synapse-connections.json file
    
    This handles the translation between the locally-global neuron IDs
    in the synapse-connections.json file generated by a pipeline and
    the truly global neuron IDs in the connectivity-graph.json file produced
    by the stitching pipeline. The output file contains the rebased
    neuron IDs.
    
    The format of synapse_inputs is a list of two-tuples. The first
    element of the list is the synapse-connections.json file generated
    by the pipeline and the second is the connectivity-graph.json file
    generated by the pipeline.
    '''
    task_namespace = "ariadne_microns_pipeline"
    
    input_files = luigi.ListParameter(
        description="A list of two-tuples of synapse-connections.json "
        "and connectivity-graph.json")
    connectivity_graph_path = luigi.Parameter(
        description="Location of the truly global connectivity graph")
    output_file = luigi.Parameter(
        description="The file name of the output file")
    
    def input(self):
        for sc, cg in self.input_files:
            yield luigi.LocalTarget(sc)
            yield luigi.LocalTarget(cg)
    
    def output(self):
        return luigi.LocalTarget(self.output_file)
    
    @staticmethod
    def volume_key(volume):
        '''Return the values of a volume as a tuple to be used as a key'''
        return (volume["x"], volume["y"], volume["z"], 
                volume["width"], volume["height"], volume["depth"])
    
    def ariadne_run(self):
        #
        # The strategy is to map blocks in the global graph with ones
        # in the local graph in order to get the mapping.
        #
        try:
            rh_logger.logger.start_process("RebaseSynapses", "starting", [])
        except:
            pass
        neuron_1 = []
        neuron_2 = []
        x = []
        y = []
        z = []
        global_cg = json.load(open(self.connectivity_graph_path))
        global_volumes = {}
        for volume, mapping in global_cg["volumes"]:
            global_volumes[RebaseSynapsesTask.volume_key(volume)] = mapping
        
        for synapse_connection_path, connectivity_graph_path \
            in self.input_files:
            sc = json.load(open(synapse_connection_path))
            cg = json.load(open(connectivity_graph_path))
            mappings = {}
            for volume, mapping in cg["volumes"]:
                #
                # Make a nifty table for going from local-global mappings
                # to truly global mappings. The first index in both
                # tables is the local-local mapping, so the second is
                # the correspondence between globals
                #
                key = RebaseSynapsesTask.volume_key(volume)
                gm = dict(global_volumes[key])
                for k, v in mapping:
                    mappings[v] = gm[k]
            #
            # Use the table on neuron_1
            #
            neuron_1 += map(mappings.get, sc["neuron_1"])
            neuron_2 += map(mappings.get, sc["neuron_2"])
            x += sc["synapse_center"]["x"]
            y += sc["synapse_center"]["y"]
            z += sc["synapse_center"]["z"]
        result = dict(neuron_1=neuron_1,
                      neuron_2=neuron_2,
                      synapse_center=dict(x=x, y=y, z=z))
        with self.output().open("w") as fd:
            json.dump(result, fd)